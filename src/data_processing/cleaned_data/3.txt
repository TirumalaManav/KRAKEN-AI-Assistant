<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>About Us - Hyperspectral Imaging Project</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
<style>
* {
margin: 0;
padding: 0;
box-sizing: border-box;
}
body {
font-family: 'Inter', sans-serif;
line-height: 1.6;
background: #f8f9fa;
color: #2a2a72;
overflow-x: hidden;
transition: background 0.5s, color 0.5s;
}
body.dark-mode {
background: #1a1a2e;
color: #ffffff;
}
/* Custom Scrollbar */
::-webkit-scrollbar {
width: 10px;
}
::-webkit-scrollbar-track {
background: #f8f9fa;
}
::-webkit-scrollbar-thumb {
background: #00d4ff;
border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
background: #ff6f61;
}
body.dark-mode ::-webkit-scrollbar-track {
background: #1a1a2e;
}
body.dark-mode ::-webkit-scrollbar-thumb {
background: #00d4ff;
}
body.dark-mode ::-webkit-scrollbar-thumb:hover {
background: #ff6f61;
}
/* Hero Section */
.hero-section {
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: white;
padding: 150px 0 200px;
position: relative;
overflow: hidden;
perspective: 1000px;
}
#particles-js {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
z-index: 1;
}
.hero-content {
max-width: 800px;
margin: 0 auto;
text-align: center;
position: relative;
z-index: 2;
}
.hero-content h1 {
font-size: 4rem;
margin-bottom: 20px;
font-weight: 700;
background: linear-gradient(45deg, #ffffff, #f8f9fa);
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
animation: floatText 4s infinite ease-in-out;
}
@keyframes floatText {
0%, 100% { transform: translateY(0) rotateX(0); }
50% { transform: translateY(-10px) rotateX(10deg); }
}
.hero-content p {
font-size: 1.2rem;
color: rgba(255, 255, 255, 0.9);
max-width: 600px;
margin: 0 auto;
}
/* Dark Mode Toggle */
.dark-mode-toggle {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
background: rgba(255, 255, 255, 0.9);
border-radius: 50%;
width: 40px;
height: 40px;
display: flex;
align-items: center;
justify-content: center;
cursor: pointer;
box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
transition: background 0.3s;
}
.dark-mode-toggle:hover {
background: rgba(255, 255, 255, 1);
}
.dark-mode-toggle i {
color: #2a2a72;
font-size: 1.2rem;
}
body.dark-mode .dark-mode-toggle {
background: rgba(42, 42, 114, 0.9);
}
body.dark-mode .dark-mode-toggle i {
color: #ffffff;
}
/* Team Grid */
.container {
max-width: 1200px;
margin: -100px auto 0;
padding: 0 20px;
position: relative;
z-index: 2;
}
.team-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
gap: 30px;
padding: 20px 0;
}
.team-member {
background: rgba(255, 255, 255, 0.9);
border-radius: 20px;
overflow: hidden;
box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
transition: transform 0.5s ease, box-shadow 0.5s ease;
position: relative;
backdrop-filter: blur(10px);
border: 2px solid transparent;
}
.team-member::before {
content: '';
position: absolute;
top: -2px;
left: -2px;
right: -2px;
bottom: -2px;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
border-radius: 20px;
z-index: -1;
opacity: 0;
transition: opacity 0.5s;
}
.team-member:hover::before {
opacity: 1;
}
.team-member:hover {
transform: rotateY(10deg) rotateX(10deg) translateY(-10px);
box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
}
.member-image {
width: 100%;
height: 300px;
position: relative;
overflow: hidden;
}
.member-image img {
width: 100%;
height: 100%;
object-fit: cover;
transition: transform 0.5s ease;
}
.team-member:hover .member-image img {
transform: scale(1.1) rotateY(5deg);
}
.member-info {
padding: 30px;
}
.member-info h3 {
font-size: 1.5rem;
margin-bottom: 10px;
color: #2a2a72;
}
.member-role {
color: #00d4ff;
font-weight: 500;
margin-bottom: 15px;
font-size: 0.9rem;
text-transform: uppercase;
letter-spacing: 1px;
}
.member-bio {
color: #636e72;
margin-bottom: 20px;
font-size: 0.95rem;
line-height: 1.7;
}
.social-links {
display: flex;
gap: 15px;
}
.social-link {
width: 40px;
height: 40px;
border-radius: 50%;
background: rgba(42, 42, 114, 0.1);
display: flex;
align-items: center;
justify-content: center;
color: #2a2a72;
text-decoration: none;
transition: all 0.3s ease;
}
.social-link:hover {
background: #ff6f61;
color: white;
transform: translateY(-3px) rotateY(10deg);
}
.achievements {
margin-top: 15px;
padding-top: 15px;
border-top: 1px solid rgba(42, 42, 114, 0.1);
}
.achievement-badge {
display: inline-flex;
align-items: center;
padding: 8px 15px;
background: rgba(42, 42, 114, 0.1);
border-radius: 20px;
font-size: 0.85rem;
color: #2a2a72;
margin-right: 10px;
margin-bottom: 10px;
transition: transform 0.3s ease;
}
.achievement-badge:hover {
transform: translateY(-5px) rotateX(5deg);
}
.achievement-badge i {
margin-right: 5px;
color: #00d4ff;
}
@media (max-width: 768px) {
.hero-content h1 {
font-size: 2.5rem;
}
.team-grid {
grid-template-columns: 1fr;
}
.container {
padding: 0 15px;
}
}
/* Loading Animation */
.loading-screen {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
display: flex;
align-items: center;
justify-content: center;
z-index: 1000;
transition: opacity 1s;
}
.loading-screen.hide {
opacity: 0;
pointer-events: none;
}
.loading-screen h1 {
font-size: 3rem;
color: white;
animation: pulse 1.5s infinite;
}
@keyframes pulse {
0%, 100% { transform: scale(1); }
50% { transform: scale(1.1); }
}
</style>
</head>
<body>
<!-- Loading Screen -->
<div class="loading-screen">
<h1>Loading...</h1>
</div>
<!-- Dark Mode Toggle -->
<div class="dark-mode-toggle" onclick="toggleDarkMode()">
<i class="fas fa-moon"></i>
</div>
<!-- Hero Section -->
<div class="hero-section">
<div id="particles-js"></div>
<div class="hero-content">
<h1>Meet Our Team</h1>
<p>Pioneering the future of Hyperspectral Imaging through innovation and expertise</p>
</div>
</div>
<!-- Team Grid -->
<div class="container">
<div class="team-grid">
<div class="team-member">
<div class="member-image">
<img src="[PLACEHOLDER_FOR_BHASKAR_IMAGE]" alt="Bhaskar Das">
</div>
<div class="member-info">
<h3>Mr. Bhaskar Das</h3>
<div class="member-role">Associate Professor & Research Lead</div>
<p class="member-bio">Currently pursuing his PhD from IIIT-Ranchi (IIIT-R), Mr. Das brings extensive expertise in Machine Learning and Hyperspectral Imaging to our team. His guidance ensures our project maintains the highest academic and practical standards.</p>
<div class="achievements">
<span class="achievement-badge">
<i class="fas fa-graduation-cap"></i> PhD Candidate at IIIT-R
</span>
<span class="achievement-badge">
<i class="fas fa-chalkboard-teacher"></i> Associate Professor
</span>
</div>
<div class="social-links">
<a href="https://www.linkedin.com/in/bhaskar-das-99969117/" target="_blank" class="social-link">
<i class="fab fa-linkedin-in"></i>
</a>
</div>
</div>
</div>
<div class="team-member">
<div class="member-image">
<img src="D:\Validating\TestingALL\static\Images\lalan.jpg" alt="Lalan Kumar">
</div>
<div class="member-info">
<h3>Lalan Kumar</h3>
<div class="member-role">MLOps Engineer</div>
<p class="member-bio">An aspiring MLOps Engineer with expertise in Machine Learning, Deep Learning, and NLP. Specialized in AutoEncoder-based model development for Hyperspectral Image Classification.</p>
<div class="achievements">
<span class="achievement-badge">
<i class="fas fa-trophy"></i> SIH 2022 Runner Up
</span>
<span class="achievement-badge">
<i class="fas fa-laptop-code"></i> 3+ Years ML Experience
</span>
</div>
<div class="social-links">
<a href="https://www.linkedin.com/in/lalan-kumar-983267229/" target="_blank" class="social-link">
<i class="fab fa-linkedin-in"></i>
</a>
<a href="https://github.com/kumar8074" target="_blank" class="social-link">
<i class="fab fa-github"></i>
</a>
</div>
</div>
</div>
<div class="team-member">
<div class="member-image">
<img src="D:\Validating\TestingALL\static\Images\manav.jpeg" alt="Manav Goud">
</div>
<div class="member-info">
<h3>Tirumala Manav</h3>
<div class="member-role">MLOPS Engineer</div>
<p class="member-bio">MLOps Engineer with experience deploying machine learning models, specializing in neural networks and deep learning. Proficient in TensorFlow, Docker, MLflow, and various MLOps tools to streamline model deployment, monitoring, and scalability.</p>
<div class="achievements">
<span class="achievement-badge">
<i class="fas fa-trophy"></i> SIH 2022 Runner Up
</span>
<span class="achievement-badge">
<i class="fas fa-laptop-code"></i> 3+ Years ML Experience
</span>
</div>
<div class="social-links">
<a href="[PLACEHOLDER_FOR_MANAV_LINKEDIN]" target="_blank" class="social-link">
<i class="fab fa-linkedin-in"></i>
</a>
<a href="https://github.com/TirumalaManav" target="_blank" class="social-link">
<i class="fab fa-github"></i>
</a>
</div>
</div>
</div>
</div>
</div>
<script>
// Particles.js Configuration
particlesJS.load('particles-js', 'particles.json', function() {
console.log('Particles.js loaded!');
});
// Dark Mode Toggle
function toggleDarkMode() {
document.body.classList.toggle('dark-mode');
const icon = document.querySelector('.dark-mode-toggle i');
if (document.body.classList.contains('dark-mode')) {
icon.classList.remove('fa-moon');
icon.classList.add('fa-sun');
} else {
icon.classList.remove('fa-sun');
icon.classList.add('fa-moon');
}
}
// Loading Screen
window.addEventListener('load', () => {
const loadingScreen = document.querySelector('.loading-screen');
setTimeout(() => {
loadingScreen.classList.add('hide');
}, 2000); // Adjust the delay as needed
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Contact Us - Hyperspectral Imaging Project</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
<style>
* {
margin: 0;
padding: 0;
box-sizing: border-box;
}
body {
font-family: 'Inter', sans-serif;
line-height: 1.6;
background: #f8f9fa;
color: #2a2a72;
overflow-x: hidden;
transition: background 0.5s, color 0.5s;
}
body.dark-mode {
background: #1a1a2e;
color: #ffffff;
}
/* Custom Scrollbar */
::-webkit-scrollbar {
width: 10px;
}
::-webkit-scrollbar-track {
background: #f8f9fa;
}
::-webkit-scrollbar-thumb {
background: #00d4ff;
border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
background: #ff6f61;
}
body.dark-mode ::-webkit-scrollbar-track {
background: #1a1a2e;
}
body.dark-mode ::-webkit-scrollbar-thumb {
background: #00d4ff;
}
body.dark-mode ::-webkit-scrollbar-thumb:hover {
background: #ff6f61;
}
/* Hero Section */
.hero-section {
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: white;
padding: 150px 0 200px;
position: relative;
overflow: hidden;
perspective: 1000px;
}
#particles-js {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
z-index: 1;
}
.hero-content {
max-width: 800px;
margin: 0 auto;
text-align: center;
position: relative;
z-index: 2;
}
.hero-content h1 {
font-size: 4rem;
margin-bottom: 20px;
font-weight: 700;
background: linear-gradient(45deg, #ffffff, #f8f9fa);
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
animation: floatText 4s infinite ease-in-out;
}
@keyframes floatText {
0%, 100% { transform: translateY(0) rotateX(0); }
50% { transform: translateY(-10px) rotateX(10deg); }
}
.hero-content p {
font-size: 1.2rem;
color: rgba(255, 255, 255, 0.9);
max-width: 600px;
margin: 0 auto;
}
/* Dark Mode Toggle */
.dark-mode-toggle {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
background: rgba(255, 255, 255, 0.9);
border-radius: 50%;
width: 40px;
height: 40px;
display: flex;
align-items: center;
justify-content: center;
cursor: pointer;
box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
transition: background 0.3s;
}
.dark-mode-toggle:hover {
background: rgba(255, 255, 255, 1);
}
.dark-mode-toggle i {
color: #2a2a72;
font-size: 1.2rem;
}
body.dark-mode .dark-mode-toggle {
background: rgba(42, 42, 114, 0.9);
}
body.dark-mode .dark-mode-toggle i {
color: #ffffff;
}
/* Contact Grid */
.container {
max-width: 1200px;
margin: -100px auto 0;
padding: 0 20px;
position: relative;
z-index: 2;
}
.contact-grid {
display: grid;
grid-template-columns: 1fr 1fr;
gap: 40px;
margin-top: 40px;
}
.contact-info, .contact-form {
background: rgba(255, 255, 255, 0.9);
padding: 40px;
border-radius: 20px;
box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
backdrop-filter: blur(10px);
border: 2px solid transparent;
transition: transform 0.5s ease, box-shadow 0.5s ease;
}
.contact-info:hover, .contact-form:hover {
transform: rotateY(10deg) rotateX(10deg) translateY(-10px);
box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
}
.info-item {
display: flex;
align-items: center;
margin-bottom: 30px;
padding: 20px;
background: rgba(42, 42, 114, 0.1);
border-radius: 15px;
transition: transform 0.3s ease;
}
.info-item:hover {
transform: translateY(-5px);
}
.info-icon {
width: 50px;
height: 50px;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
border-radius: 50%;
display: flex;
align-items: center;
justify-content: center;
margin-right: 20px;
color: white;
}
.info-content h3 {
font-size: 1.1rem;
margin-bottom: 5px;
color: #2a2a72;
}
.info-content p {
color: #636e72;
font-size: 0.95rem;
}
.form-group {
margin-bottom: 20px;
}
.form-label {
display: block;
margin-bottom: 8px;
font-weight: 500;
color: #2a2a72;
}
.form-input {
width: 100%;
padding: 12px 15px;
border: 2px solid #e9ecef;
border-radius: 10px;
font-size: 0.95rem;
transition: all 0.3s ease;
}
.form-input:focus {
outline: none;
border-color: #00d4ff;
}
.submit-btn {
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: white;
padding: 15px 30px;
border: none;
border-radius: 10px;
font-size: 1rem;
cursor: pointer;
transition: transform 0.3s ease;
width: 100%;
margin-top: 20px;
}
.submit-btn:hover {
transform: translateY(-2px);
}
.map-container {
margin-top: 60px;
border-radius: 20px;
overflow: hidden;
box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}
.map-container iframe {
width: 100%;
height: 400px;
border: none;
}
.social-links {
display: flex;
gap: 15px;
margin-top: 30px;
justify-content: center;
}
.social-link {
width: 45px;
height: 45px;
border-radius: 50%;
background: rgba(42, 42, 114, 0.1);
display: flex;
align-items: center;
justify-content: center;
color: #2a2a72;
text-decoration: none;
transition: all 0.3s ease;
}
.social-link:hover {
background: #ff6f61;
color: white;
transform: translateY(-3px);
}
@media (max-width: 768px) {
.contact-grid {
grid-template-columns: 1fr;
}
.hero-content h1 {
font-size: 2.5rem;
}
}
/* Loading Animation */
.loading-screen {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
display: flex;
align-items: center;
justify-content: center;
z-index: 1000;
transition: opacity 1s;
}
.loading-screen.hide {
opacity: 0;
pointer-events: none;
}
.loading-screen h1 {
font-size: 3rem;
color: white;
animation: pulse 1.5s infinite;
}
@keyframes pulse {
0%, 100% { transform: scale(1); }
50% { transform: scale(1.1); }
}
</style>
</head>
<body>
<!-- Loading Screen -->
<div class="loading-screen">
<h1>Loading...</h1>
</div>
<!-- Dark Mode Toggle -->
<div class="dark-mode-toggle" onclick="toggleDarkMode()">
<i class="fas fa-moon"></i>
</div>
<!-- Hero Section -->
<div class="hero-section">
<div id="particles-js"></div>
<div class="hero-content">
<h1>Contact Us</h1>
<p>Get in touch with our team at Hyderabad Institute of Technology and Management</p>
</div>
</div>
<!-- Contact Grid -->
<div class="container">
<div class="contact-grid">
<div class="contact-info">
<div class="info-item">
<div class="info-icon">
<i class="fas fa-map-marker-alt"></i>
</div>
<div class="info-content">
<h3>Location</h3>
<p>HITAM, Hyderabad Institute of Technology and Management</p>
<p>Gowdavelly, Medchal, Hyderabad - 501401</p>
</div>
</div>
<div class="info-item">
<div class="info-icon">
<i class="fas fa-phone"></i>
</div>
<div class="info-content">
<h3>Phone</h3>
<p>+91 40 2934 5678</p>
<p>Mon-Fri 9:00 AM - 5:00 PM</p>
</div>
</div>
<div class="info-item">
<div class="info-icon">
<i class="fas fa-envelope"></i>
</div>
<div class="info-content">
<h3>Email</h3>
<p>info@hitam.org</p>
<p>support@hitam.org</p>
</div>
</div>
<div class="social-links">
<a href="#" class="social-link"><i class="fab fa-linkedin-in"></i></a>
<a href="#" class="social-link"><i class="fab fa-github"></i></a>
<a href="#" class="social-link"><i class="fab fa-twitter"></i></a>
<a href="#" class="social-link"><i class="fab fa-instagram"></i></a>
</div>
</div>
<div class="contact-form">
<form>
<div class="form-group">
<label class="form-label">Name</label>
<input type="text" class="form-input" placeholder="Enter your name">
</div>
<div class="form-group">
<label class="form-label">Email</label>
<input type="email" class="form-input" placeholder="Enter your email">
</div>
<div class="form-group">
<label class="form-label">Subject</label>
<input type="text" class="form-input" placeholder="Enter subject">
</div>
<div class="form-group">
<label class="form-label">Message</label>
<textarea class="form-input" rows="5" placeholder="Enter your message"></textarea>
</div>
<button type="submit" class="submit-btn">Send Message</button>
</form>
</div>
</div>
<!-- Map Container -->
<div class="map-container">
<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3803.719411662753!2d78.5831373!3d17.591195!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bcb83a4b5c44c07%3A0x4b16c5392fe6c265!2sHyderabad%20Institute%20of%20Technology%20And%20Management!5e0!3m2!1sen!2sin!4v1665835884095!5m2!1sen!2sin" allowfullscreen="" loading="lazy"></iframe>
</div>
</div>
<script>
// Particles.js Configuration
particlesJS.load('particles-js', 'particles.json', function() {
console.log('Particles.js loaded!');
});
// Dark Mode Toggle
function toggleDarkMode() {
document.body.classList.toggle('dark-mode');
const icon = document.querySelector('.dark-mode-toggle i');
if (document.body.classList.contains('dark-mode')) {
icon.classList.remove('fa-moon');
icon.classList.add('fa-sun');
} else {
icon.classList.remove('fa-sun');
icon.classList.add('fa-moon');
}
}
// Loading Screen
window.addEventListener('load', () => {
const loadingScreen = document.querySelector('.loading-screen');
setTimeout(() => {
loadingScreen.classList.add('hide');
}, 2000); // Adjust the delay as needed
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Hyperspectral Imaging Innovation Hub</title>
<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>🌐</text></svg>">
<style>
/* Reset */
* {
margin: 0;
padding: 0;
box-sizing: border-box;
}
body {
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
line-height: 1.6;
color: #333;
background: #f8f9fa;
overflow-x: hidden;
}
/* Header */
.header {
background: linear-gradient(135deg, #2a2a72, #009ffd);
padding: 1rem 2rem;
position: fixed;
width: 100%;
top: 0;
z-index: 1000;
box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
backdrop-filter: blur(10px);
}
.nav-container {
display: flex;
justify-content: space-between;
align-items: center;
max-width: 1400px;
margin: 0 auto;
}
.logo {
font-size: 1.5rem;
font-weight: bold;
color: white;
text-transform: uppercase;
letter-spacing: 2px;
animation: glow 2s ease-in-out infinite alternate;
}
@keyframes glow {
0% { text-shadow: 0 0 5px rgba(255, 255, 255, 0.8); }
50% { text-shadow: 0 0 20px rgba(0, 212, 255, 0.8), 0 0 30px rgba(255, 111, 97, 0.8); }
100% { text-shadow: 0 0 5px rgba(255, 255, 255, 0.8); }
}
.nav-links {
display: flex;
gap: 2rem;
list-style: none;
}
.nav-links a {
color: white;
text-decoration: none;
padding: 0.5rem 1rem;
border-radius: 25px;
transition: all 0.3s ease;
}
.nav-links a:hover {
background: rgba(255, 255, 255, 0.2);
transform: translateY(-2px);
box-shadow: 0 0 10px rgba(0, 212, 255, 0.8), 0 0 20px rgba(255, 111, 97, 0.8);
}
/* Hero Section */
.hero {
height: 100vh;
display: flex;
align-items: center;
justify-content: center;
text-align: center;
background: linear-gradient(45deg, #00d4ff, #ff6f61); /* Gradient background */
color: white;
position: relative;
overflow: hidden;
}
/* Background Text Animation */
.background-text {
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%) perspective(500px) rotateX(30deg) rotateY(0deg);
font-size: 15rem;
font-weight: bold;
color: rgba(255, 255, 255, 0.1); /* Semi-transparent text */
text-transform: uppercase;
user-select: none;
animation: float 10s infinite ease-in-out, rotate 20s infinite linear;
z-index: 0;
}
@keyframes float {
0%, 100% {
transform: translate(-50%, -50%) perspective(500px) rotateX(30deg) rotateY(0deg) translateY(0);
}
50% {
transform: translate(-50%, -50%) perspective(500px) rotateX(30deg) rotateY(0deg) translateY(-20px);
}
}
@keyframes rotate {
0% {
transform: translate(-50%, -50%) perspective(500px) rotateX(30deg) rotateY(0deg);
}
100% {
transform: translate(-50%, -50%) perspective(500px) rotateX(30deg) rotateY(360deg);
}
}
/* Hero Content */
.hero-content {
max-width: 800px;
z-index: 1;
}
.hero h1 {
font-size: 2.5rem;
margin-bottom: 1rem;
animation: fadeIn 1s ease-out;
color: white; /* Ensure text is visible */
}
.hero p {
font-size: 1.2rem;
margin-bottom: 2rem;
animation: fadeIn 1s ease-out 0.2s backwards;
color: white; /* Ensure text is visible */
}
@keyframes fadeIn {
from {
opacity: 0;
}
to {
opacity: 1;
}
}
.deployment-info {
font-size: 1rem;
margin-bottom: 1rem;
color: white; /* Ensure text is visible */
}
.system-capabilities {
font-size: 1.1rem;
margin-bottom: 2rem;
color: white; /* Ensure text is visible */
}
.key-metrics {
display: flex;
justify-content: space-around;
margin-bottom: 2rem;
}
.metric {
text-align: center;
color: white; /* Ensure text is visible */
}
.metric strong {
display: block;
font-size: 1.5rem;
margin-top: 0.5rem;
}
.tech-stack {
font-size: 1.1rem;
margin-bottom: 2rem;
color: white; /* Ensure text is visible */
}
.certification {
font-size: 1rem;
margin-bottom: 2rem;
color: white; /* Ensure text is visible */
}
.cta-buttons {
display: flex;
gap: 1rem;
justify-content: center;
}
.primary-btn, .secondary-btn {
padding: 0.8rem 2rem;
border: none;
border-radius: 25px;
font-size: 1rem;
font-weight: bold;
cursor: pointer;
transition: all 0.3s ease;
}
.primary-btn {
background: #ff6f61;
color: white;
box-shadow: 0 4px 15px rgba(255, 111, 97, 0.4), 0 0 10px rgba(255, 111, 97, 0.8);
}
.secondary-btn {
background: transparent;
border: 2px solid #ff6f61;
color: #ff6f61;
box-shadow: 0 0 10px rgba(255, 111, 97, 0.8);
}
.primary-btn:hover {
transform: translateY(-5px);
box-shadow: 0 6px 20px rgba(255, 111, 97, 0.6), 0 0 20px rgba(255, 111, 97, 0.8);
}
.secondary-btn:hover {
background: #ff6f61;
color: white;
box-shadow: 0 0 20px rgba(255, 111, 97, 0.8);
}
/* Main Content */
.main-content {
max-width: 1200px;
margin: 0 auto;
padding: 4rem 2rem;
}
.section {
margin-bottom: 4rem;
opacity: 0;
transform: translateY(20px);
transition: all 0.6s ease-out;
}
.section.visible {
opacity: 1;
transform: translateY(0);
}
.section-title {
font-size: 2.5rem;
margin-bottom: 2rem;
color: #2a2a72;
position: relative;
}
.section-title::after {
content: '';
position: absolute;
bottom: -10px;
left: 0;
width: 60px;
height: 4px;
background: linear-gradient(135deg, #2a2a72, #009ffd);
border-radius: 2px;
}
/* Card Grid */
.card-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
gap: 2rem;
margin-top: 2rem;
}
.card {
background: white;
padding: 2rem;
border-radius: 15px;
box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1), 0 0 10px rgba(0, 212, 255, 0.4);
transition: transform 0.3s ease;
}
.card:hover {
transform: translateY(-5px);
box-shadow: 0 5px 20px rgba(0, 212, 255, 0.6), 0 0 20px rgba(255, 111, 97, 0.8);
}
/* Footer */
.footer {
background: #2a2a72;
color: white;
padding: 3rem 2rem;
text-align: center;
}
.footer-content {
max-width: 1200px;
margin: 0 auto;
display: grid;
grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
gap: 2rem;
}
.footer-links a {
color: white;
text-decoration: none;
margin: 0 1rem;
transition: color 0.3s ease;
}
.footer-links a:hover {
color: #00d4ff;
}
/* Responsive Design */
@media (max-width: 768px) {
.nav-links {
display: none;
}
.hero h1 {
font-size: 2.5rem;
}
.background-text {
font-size: 8rem;
}
.key-metrics {
flex-direction: column;
gap: 1rem;
}
}
</style>
</head>
<body>
<header class="header">
<nav class="nav-container">
<div class="logo">HyperSpec AI</div>
<ul class="nav-links">
<li><a href="{{ url_for('home') }}">Home</a></li>
<li><a href="{{ url_for('about') }}">About Us</a></li>
<li><a href="{{ url_for('try_it_yourself') }}">Try It Yourself</a></li>
<li><a href="{{ url_for('contact') }}">Contact</a></li>
<li><a href="{{ url_for('login') }}">Login</a></li>
</ul>
</nav>
</header>
<section class="hero" id="home">
<div class="background-text">HYPERSPECTRAL</div>
<div class="hero-content">
<h2>Revolutionizing Hyperspectral Image Classification</h2>
<div class="deployment-info">
<span>v2.4.1 Stable Release</span> •
<span>Last Updated: 2025-01-16</span>
</div>
<p class="system-capabilities">
Unified MLOps Pipeline Supporting:
<span class="highlight">CNN, GAN, and Autoencoder Models</span> •
<span class="highlight">Accelerated Training Pipelines</span> •
<span class="highlight">Highly Accurate Predictions</span>
</p>
<div class="key-metrics">
<div class="metric">
<span>Model Architectures</span>
<strong>CNN, GAN, Autoencoder</strong>
</div>
<div class="metric">
<span>Model Accuracy</span>
<strong>99% Across All Architectures</strong>
</div>
<div class="metric">
<span>Training Speed</span>
<strong>Optimized for Faster Results</strong>
</div>
</div>
<div class="tech-stack">
Powered by:
<span class="tech">TensorFlow</span> •
<span class="tech">MLflow</span> •
<span class="tech">Kubernetes</span> •
<span class="tech">DVC</span>
</div>
<div class="certification">
<span>ISO 27001 Certified</span> •
<span>HIPAA Compliant</span> •
<span>SOC 2 Type II</span>
</div>
<div class="cta-buttons">
<button class="primary-btn">View Documentation</button>
<button class="secondary-btn">Download WhitePaper</button>
</div>
</div>
</section>
<main class="main-content">
<section class="section" id="overview">
<h2 class="section-title">Understanding Hyperspectral Imaging</h2>
<div class="card-grid">
<div class="card">
<h3>What is Hyperspectral Imaging?</h3>
<p>Hyperspectral imaging combines spectroscopy with digital imaging to capture detailed spectral information across hundreds of continuous wavelength bands. Each pixel in a hyperspectral image contains a complete spectral signature, enabling precise material identification and analysis.</p>
</div>
<div class="card">
<h3>Applications</h3>
<p>From precision agriculture and environmental monitoring to medical diagnostics and defense applications, hyperspectral imaging is revolutionizing how we see and analyze our world. Its ability to detect subtle material differences makes it invaluable across numerous industries.</p>
</div>
<div class="card">
<h3>Societal Impact</h3>
<p>This technology helps address critical challenges in food security, environmental protection, healthcare, and national security. It enables early detection of crop diseases, monitors environmental changes, assists in medical diagnoses, and enhances surveillance capabilities.</p>
</div>
</div>
</section>
<section class="section" id="models">
<h2 class="section-title">Our Advanced Models</h2>
<div class="card-grid">
<div class="card">
<h3>CNN</h3>
<p>Convolutional Neural Networks excel at spatial feature extraction, making them perfect for analyzing the complex patterns in hyperspectral data. Our CNN models achieve state-of-the-art accuracy in classification tasks.</p>
</div>
<div class="card">
<h3>AutoEncoder</h3>
<p>Our AutoEncoder architecture efficiently compresses hyperspectral data while preserving essential features, enabling faster processing and improved classification accuracy through dimensionality reduction.</p>
</div>
<div class="card">
<h3>GAN</h3>
<p>Generative Adversarial Networks help overcome limited data challenges by generating synthetic training samples, enhancing model robustness and improving classification accuracy through data augmentation.</p>
</div>
</div>
</section>
</main>
<footer class="footer">
<div class="footer-content">
<div class="footer-section">
<h3>Contact Us</h3>
<p>Email: info@hyperspecai.com</p>
<p>Location: Innovation Hub, Tech Valley</p>
</div>
<div class="footer-section">
<h3>Quick Links</h3>
<div class="footer-links">
<a href="#about">About Us</a>
<a href="#train">Try It Yourself</a>
<a href="#login">Login</a>
</div>
</div>
<div class="footer-section">
<h3>Developed By</h3>
<div class="footer-links">
<a href="https://www.linkedin.com/in/bhaskar-das-99969117/" target="_blank">Bhaskar Das</a>
<a href="https://www.linkedin.com/in/lalan-kumar-983267229/" target="_blank">Lalan Kumar</a>
<a href="https://www.linkedin.com/in/manav-goud" target="_blank">Manav Goud</a>
</div>
</div>
</div>
<div style="margin-top: 2rem; text-align: center;">
<p>&copy; 2024 HyperSpec AI. All rights reserved.</p>
</div>
</footer>
<script>
// Intersection Observer for scroll animations
const sections = document.querySelectorAll('.section');
const observer = new IntersectionObserver((entries) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
entry.target.classList.add('visible');
}
});
}, { threshold: 0.1 });
sections.forEach(section => {
observer.observe(section);
});
// Smooth scroll for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
anchor.addEventListener('click', function (e) {
e.preventDefault();
document.querySelector(this.getAttribute('href')).scrollIntoView({
behavior: 'smooth'
});
});
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="TirumalaManav">
<meta name="description" content="Hyperspectral Analysis Dashboard">
<meta name="last-modified" content="2025-01-24 05:18:01">
<title>Hyperspectral Analysis Dashboard</title>
<!-- External Libraries -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
<style>
/* Reset and Base Styles */
* {
margin: 0;
padding: 0;
box-sizing: border-box;
font-family: 'Roboto', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
:root {
--cyan: #00d4ff; /* Cyan */
--coral: #ff6f61; /* Coral */
--white: #ffffff; /* White */
--light-gray: #f8f9fa; /* Light Gray */
--semi-transparent-white: rgba(255, 255, 255, 0.1); /* Semi-Transparent White */
--header-gradient: linear-gradient(135deg, var(--cyan), var(--coral)); /* Cyan to Coral gradient */
--hero-gradient: linear-gradient(45deg, var(--cyan), var(--coral)); /* Cyan to Coral gradient */
--card-background: rgba(255, 255, 255, 0.9); /* White with transparency */
--text-primary: #2a2a72; /* Dark Blue for text (unchanged for readability) */
--text-secondary: #636e72; /* Light Gray for secondary text */
--shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
--transition: all 0.3s ease;
}
body {
background-color: var(--light-gray);
color: var(--text-primary);
line-height: 1.6;
min-height: 100vh;
overflow-x: hidden;
transition: background 0.5s, color 0.5s;
}
body.dark-mode {
background: #1a1a2e;
color: var(--white);
}
/* Custom Scrollbar */
::-webkit-scrollbar {
width: 10px;
}
::-webkit-scrollbar-track {
background: var(--light-gray);
}
::-webkit-scrollbar-thumb {
background: var(--cyan);
border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
background: var(--coral);
}
body.dark-mode ::-webkit-scrollbar-track {
background: #1a1a2e;
}
body.dark-mode ::-webkit-scrollbar-thumb {
background: var(--cyan);
}
body.dark-mode ::-webkit-scrollbar-thumb:hover {
background: var(--coral);
}
/* Loading Overlay */
.loading-overlay {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: rgba(255, 255, 255, 0.95);
display: flex;
justify-content: center;
align-items: center;
z-index: 9999;
}
.loader {
width: 50px;
height: 50px;
border: 5px solid var(--light-gray);
border-top: 5px solid var(--cyan);
border-radius: 50%;
animation: spin 1s linear infinite;
}
@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}
/* Dashboard Layout */
.dashboard {
display: flex;
flex-direction: column;
min-height: 100vh;
padding: 2rem;
gap: 2rem;
}
/* Sidebar */
.sidebar {
background: var(--header-gradient); /* Cyan to Coral gradient */
color: var(--white);
padding: 2rem;
width: 250px;
position: fixed;
height: 100vh;
overflow-y: auto;
z-index: 100;
backdrop-filter: blur(10px);
border-right: 1px solid rgba(255, 255, 255, 0.1);
transform: translateX(-100%);
animation: slideIn 0.5s forwards;
}
@keyframes slideIn {
to {
transform: translateX(0);
}
}
.sidebar-header {
display: flex;
align-items: center;
margin-bottom: 2rem;
padding-bottom: 1rem;
border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}
.logo {
width: 40px;
height: 40px;
margin-right: 1rem;
border-radius: 8px;
}
.user-info,
.timestamp {
display: flex;
align-items: center;
margin-bottom: 1rem;
font-size: 0.9rem;
color: var(--white);
padding: 0.5rem;
background: var(--semi-transparent-white);
border-radius: 8px;
}
.user-info i,
.timestamp i {
margin-right: 0.5rem;
font-size: 1.1rem;
}
.nav-menu {
margin-top: 2rem;
}
.nav-menu a {
display: flex;
align-items: center;
padding: 0.8rem 1rem;
color: var(--white);
text-decoration: none;
border-radius: 8px;
margin-bottom: 0.5rem;
transition: var(--transition);
}
.nav-menu a i {
margin-right: 1rem;
width: 20px;
text-align: center;
}
.nav-menu a:hover,
.nav-menu a.active {
background-color: var(--cyan);
transform: translateX(5px);
}
/* Main Content */
.main-content {
margin-left: 250px;
padding: 2rem;
transition: var(--transition);
flex-grow: 1;
}
/* Header */
.header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 2rem;
padding: 1rem;
background: var(--header-gradient); /* Cyan to Coral gradient */
color: var(--white);
border-radius: 12px;
box-shadow: var(--shadow);
animation: fadeIn 1s ease-in;
}
@keyframes fadeIn {
from {
opacity: 0;
}
to {
opacity: 1;
}
}
.header-title h1 {
font-size: 1.8rem;
margin-bottom: 0.5rem;
}
.highlight {
color: var(--cyan);
font-weight: 500;
}
/* Buttons */
.btn {
padding: 0.8rem 1.5rem;
border: none;
border-radius: 8px;
cursor: pointer;
display: flex;
align-items: center;
gap: 0.5rem;
font-weight: 500;
transition: var(--transition);
}
.btn-primary {
background: var(--hero-gradient); /* Cyan to Coral gradient */
color: var(--white);
}
.btn-primary:hover {
background: linear-gradient(45deg, var(--coral), var(--cyan)); /* Reverse gradient on hover */
}
.btn-secondary {
background-color: var(--light-gray);
color: var(--text-primary);
}
.btn:hover {
transform: translateY(-2px);
box-shadow: var(--shadow);
}
/* Results Grid */
.results-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
gap: 2rem;
}
/* Cards */
.card {
background-color: var(--card-background);
border-radius: 12px;
box-shadow: var(--shadow);
overflow: hidden;
transition: var(--transition);
height: fit-content;
max-height: 800px;
backdrop-filter: blur(10px);
border: 1px solid rgba(255, 255, 255, 0.1);
transform: perspective(1000px) rotateY(0deg) rotateX(0deg);
animation: cardFloat 3s infinite ease-in-out;
}
@keyframes cardFloat {
0%, 100% {
transform: translateY(0);
}
50% {
transform: translateY(-10px);
}
}
.card:hover {
transform: rotateY(10deg) rotateX(10deg) translateY(-10px);
box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
}
.card-header {
padding: 1.5rem;
background: var(--header-gradient); /* Cyan to Coral gradient */
color: var(--white);
display: flex;
justify-content: space-between;
align-items: center;
}
.card-header h2 {
display: flex;
align-items: center;
gap: 0.5rem;
font-size: 1.2rem;
}
.card-actions i {
margin-left: 1rem;
cursor: pointer;
transition: var(--transition);
}
.card-actions i:hover {
color: var(--cyan);
transform: scale(1.1);
}
.card-content {
padding: 1.5rem;
height: calc(100% - 60px);
overflow: auto;
}
/* Training Summary */
.training-summary {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
gap: 1.5rem;
}
.summary-item {
text-align: center;
padding: 1.5rem;
background-color: var(--light-gray);
border-radius: 8px;
transition: var(--transition);
}
.summary-item:hover {
transform: translateY(-3px);
box-shadow: var(--shadow);
}
.summary-item h3 {
font-size: 0.9rem;
color: var(--text-secondary);
margin-bottom: 0.5rem;
}
.summary-item p {
font-size: 1.8rem;
font-weight: 600;
color: var(--text-primary);
}
/* Progress Bars */
.progress-bar {
width: 100%;
height: 10px;
background-color: var(--light-gray);
border-radius: 5px;
overflow: hidden;
margin-top: 0.5rem;
}
.progress-bar-fill {
height: 100%;
background: var(--header-gradient); /* Cyan to Coral gradient */
border-radius: 5px;
}
/* Visualization Containers */
.comparison-container {
display: grid;
grid-template-columns: 1fr 1fr;
gap: 1.5rem;
margin-bottom: 2rem;
}
.image-container {
display: flex;
flex-direction: column;
align-items: center;
}
.image-container h3 {
margin-bottom: 1rem;
color: var(--text-primary);
font-size: 1.1rem;
}
.image-container img {
max-width: 100%;
height: auto;
border-radius: 8px;
box-shadow: var(--shadow);
transition: var(--transition);
}
.image-container img:hover {
transform: scale(1.02);
}
/* Confusion Matrix */
.confusion-matrix-container {
width: 100%;
overflow: hidden;
padding: 1rem;
}
.confusion-matrix-container img {
max-width: 100%;
height: auto;
border-radius: 8px;
box-shadow: var(--shadow);
}
/* Training Charts */
.training-charts {
display: grid;
grid-template-columns: 1fr;
gap: 2rem;
padding: 1rem;
}
.training-charts canvas {
max-height: 400px !important;
width: 100% !important;
}
.chart-container {
position: relative;
height: 400px;
width: 100%;
margin-bottom: 2rem;
}
/* Classification Report */
.report-container {
background-color: var(--light-gray);
padding: 1.5rem;
border-radius: 8px;
font-family: monospace;
white-space: pre-wrap;
overflow-x: auto;
font-size: 0.9rem;
line-height: 1.5;
}
.visual-report {
background-color: var(--card-background);
padding: 1.5rem;
border-radius: 8px;
box-shadow: var(--shadow);
}
.visual-report table {
width: 100%;
border-collapse: collapse;
}
.visual-report th,
.visual-report td {
padding: 0.75rem;
text-align: left;
border-bottom: 1px solid var(--light-gray);
}
.visual-report th {
background: var(--header-gradient); /* Cyan to Coral gradient */
color: var(--white);
}
.visual-report tr:hover {
background-color: var(--light-gray);
}
/* Dataset Selection */
.dataset-selector {
margin-bottom: 2rem;
padding: 1rem;
background-color: var(--card-background);
border-radius: 8px;
box-shadow: var(--shadow);
}
.dataset-selector select {
padding: 0.5rem 1rem;
border: 1px solid var(--text-secondary);
border-radius: 4px;
background-color: var(--white);
color: var(--text-primary);
font-size: 1rem;
width: 200px;
}
/* Messages */
.error-message,
.success-message {
padding: 1rem;
border-radius: 8px;
margin-bottom: 1rem;
display: flex;
align-items: center;
gap: 0.5rem;
color: var(--white);
}
.error-message {
background-color: var(--coral);
}
.success-message {
background-color: var(--cyan);
}
.error-message i,
.success-message i {
font-size: 1.2rem;
}
/* Modal */
.modal {
display: none;
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background-color: rgba(0, 0, 0, 0.7);
z-index: 1000;
}
.modal-content {
position: relative;
background-color: var(--card-background);
margin: 5% auto;
padding: 2rem;
width: 90%;
max-width: 1200px;
max-height: 90vh;
overflow-y: auto;
border-radius: 12px;
box-shadow: var(--shadow);
}
.modal-content img {
max-width: 100%;
height: auto;
}
.close {
position: absolute;
right: 1.5rem;
top: 1rem;
font-size: 1.8rem;
cursor: pointer;
transition: var(--transition);
}
.close:hover {
color: var(--coral);
}
/* Responsive Design */
@media (max-width: 1024px) {
.dashboard {
flex-direction: column;
}
.sidebar {
position: static;
width: 100%;
height: auto;
}
.main-content {
margin-left: 0;
}
.results-grid {
grid-template-columns: 1fr;
}
}
@media (max-width: 768px) {
.comparison-container {
grid-template-columns: 1fr;
}
.metrics-summary {
grid-template-columns: 1fr;
}
.card {
margin-bottom: 1rem;
}
}
/* Custom Scrollbar */
::-webkit-scrollbar {
width: 8px;
}
::-webkit-scrollbar-track {
background: var(--light-gray);
}
::-webkit-scrollbar-thumb {
background: var(--cyan);
border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
background: var(--coral);
}
</style>
</head>
<body>
<!-- Loading Overlay -->
<div class="loading-overlay">
<div class="loader"></div>
<p>Loading...</p>
</div>
<div class="dashboard">
<!-- Sidebar -->
<div class="sidebar">
<div class="sidebar-header">
<img src="logo.png" alt="Logo" class="logo">
<h1>HSI Analysis</h1>
</div>
<div class="user-info">
<i class="fas fa-user"></i>
<span>{{ data.username }}</span>
</div>
<div class="timestamp">
<i class="fas fa-clock"></i>
<span>{{ data.timestamp }}</span>
</div>
<div class="nav-menu">
<a href="#overview" class="active">
<i class="fas fa-home"></i>
Overview
</a>
<a href="#visualizations">
<i class="fas fa-chart-bar"></i>
Visualizations
</a>
</div>
</div>
<!-- Main Content -->
<div class="main-content">
<!-- Header -->
<div class="header">
<div class="header-title">
<h1>Analysis Results: <span class="highlight">{{ data.selected_dataset }}</span></h1>
</div>
<div class="dataset-selector">
<select onchange="window.location.href='/?dataset=' + this.value">
{% for dataset in data.available_datasets %}
<option value="{{ dataset }}" {% if dataset == data.selected_dataset %}selected{% endif %}>
{{ dataset }}
</option>
{% endfor %}
</select>
</div>
</div>
<!-- Results Grid -->
<div class="results-grid">
<!-- Overview Card -->
<div class="card">
<div class="card-header">
<h2><i class="fas fa-chart-pie"></i> Training Summary</h2>
</div>
<div class="card-content">
<div class="training-summary">
<div class="summary-item">
<h3>Model Type</h3>
<p>{{ data.overview.model_type }}</p>
</div>
<div class="summary-item">
<h3>Training Time</h3>
<p>{{ data.overview.training_time }}</p>
</div>
<div class="summary-item">
<h3>Accuracy</h3>
<p>{{ data.overview.accuracy }}</p>
</div>
</div>
</div>
</div>
<!-- Prediction Comparison -->
<div class="card">
<div class="card-header">
<h2><i class="fas fa-images"></i> Prediction Comparison</h2>
</div>
<div class="card-content">
<div class="image-container">
<img src="{{ data.images.comparison }}" alt="Prediction Comparison" class="zoomable">
</div>
</div>
</div>
<!-- Confusion Matrix -->
<div class="card">
<div class="card-header">
<h2><i class="fas fa-th"></i> Confusion Matrix</h2>
</div>
<div class="card-content">
<div class="image-container">
<img src="{{ data.images.confusion_matrix }}" alt="Confusion Matrix" class="zoomable">
</div>
</div>
</div>
<!-- Training History -->
<div class="card">
<div class="card-header">
<h2><i class="fas fa-history"></i> Training History</h2>
</div>
<div class="card-content">
<div class="image-container">
<img src="{{ data.images.training_history }}" alt="Training History" class="zoomable">
</div>
<div class="report-container">
<pre>{{ data.reports.training }}</pre>
</div>
</div>
</div>
<!-- Classification Report -->
<div class="card">
<div class="card-header">
<h2><i class="fas fa-file-alt"></i> Classification Report</h2>
</div>
<div class="card-content">
<div class="report-container visual-report">
<pre>{{ data.reports.classification }}</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- Modal for zoomed images -->
<div id="imageModal" class="modal">
<span class="close">&times;</span>
<img class="modal-content" id="modalImage">
</div>
<script>
// Image zoom functionality
document.addEventListener('DOMContentLoaded', function() {
const modal = document.getElementById('imageModal');
const modalImg = document.getElementById('modalImage');
const closeBtn = document.getElementsByClassName('close')[0];
// Get all zoomable images
const zoomableImages = document.getElementsByClassName('zoomable');
Array.from(zoomableImages).forEach(img => {
img.onclick = function() {
modal.style.display = "block";
modalImg.src = this.src;
}
});
closeBtn.onclick = function() {
modal.style.display = "none";
}
window.onclick = function(event) {
if (event.target == modal) {
modal.style.display = "none";
}
}
});
// Loading overlay
window.addEventListener('load', function() {
document.querySelector('.loading-overlay').style.display = 'none';
});
// Navigation menu
document.querySelectorAll('.nav-menu a').forEach(link => {
link.addEventListener('click', function(e) {
e.preventDefault();
document.querySelectorAll('.nav-menu a').forEach(a => a.classList.remove('active'));
this.classList.add('active');
const target = document.querySelector(this.getAttribute('href'));
target.scrollIntoView({ behavior: 'smooth' });
});
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Hyper Spectral Image Classification</title>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
<style>
/* Your existing CSS remains unchanged */
* {
margin: 0;
padding: 0;
box-sizing: border-box;
font-family: 'Poppins', sans-serif;
}
body {
min-height: 100vh;
background: linear-gradient(140deg, #000000, #1a1a2e);
display: flex;
justify-content: center;
align-items: center;
color: #fff;
}
/* Particle Background Animation */
.particles {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
z-index: -1;
background: radial-gradient(circle, rgba(0, 0, 0, 0.8), rgba(26, 26, 46, 0.9));
}
.particle {
position: absolute;
width: 2px;
height: 2px;
background: rgba(255, 255, 255, 0.2);
border-radius: 50%;
animation: floatParticle 5s infinite ease-in-out;
}
@keyframes floatParticle {
0%, 100% {
transform: translateY(0) translateX(0);
}
50% {
transform: translateY(-20px) translateX(20px);
}
}
.brand-background {
position: fixed;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 12.5vw;
color: rgba(255, 255, 255, 0.03);
white-space: nowrap;
z-index: 0;
font-weight: bold;
letter-spacing: -3px;
animation: floatText 10s ease-in-out infinite;
}
@keyframes floatText {
0%, 100% {
transform: translate(-50%, -50%) translateY(0);
}
50% {
transform: translate(-50%, -50%) translateY(-20px);
}
}
.container {
position: relative;
z-index: 1;
width: 100%;
max-width: 480px;
padding: 2rem;
}
.auth-box {
background: rgba(255, 255, 255, 0.08);
backdrop-filter: blur(20px);
border-radius: 20px;
padding: 2.5rem;
box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2),
0 2px 4px rgba(255, 255, 255, 0.1);
text-align: center;
border: 1px solid rgba(255, 255, 255, 0.1);
transform-style: preserve-3d;
animation: floatBox 6s ease-in-out infinite;
}
@keyframes floatBox {
0%, 100% {
transform: translateY(0) rotateX(0) rotateY(0);
}
50% {
transform: translateY(-10px) rotateX(5deg) rotateY(5deg);
}
}
.logo {
margin-bottom: 2rem;
font-size: 1.5rem;
font-weight: bold;
letter-spacing: 2px;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
animation: glowLogo 2s ease-in-out infinite alternate;
}
@keyframes glowLogo {
0% {
text-shadow: 0 0 5px rgba(0, 212, 255, 0.8);
}
100% {
text-shadow: 0 0 20px rgba(255, 111, 97, 0.8);
}
}
.tabs {
display: flex;
gap: 1rem;
margin-bottom: 2rem;
background: rgba(0, 0, 0, 0.2);
padding: 0.5rem;
border-radius: 12px;
}
.tab {
flex: 1;
padding: 1rem;
background: rgba(255, 255, 255, 0.1);
border-radius: 10px;
cursor: pointer;
transition: 0.3s;
font-weight: 500;
}
.tab.active {
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: #fff;
box-shadow: 0 4px 15px rgba(255, 111, 97, 0.3);
}
input {
width: 100%;
padding: 1rem;
margin-bottom: 1rem;
background: rgba(255, 255, 255, 0.1);
border: 1px solid rgba(255, 255, 255, 0.1);
border-radius: 10px;
color: #fff;
font-size: 1rem;
transition: all 0.3s ease;
}
input:focus {
outline: none;
background: rgba(255, 255, 255, 0.15);
border-color: rgba(255, 255, 255, 0.3);
box-shadow: 0 0 15px rgba(255, 255, 255, 0.1);
}
.video-container {
width: 100%;
aspect-ratio: 1;
border-radius: 10px;
overflow: hidden;
margin: 1rem 0;
background: rgba(255, 255, 255, 0.1);
display: none;
position: relative;
border: 1px solid rgba(255, 255, 255, 0.1);
}
video {
width: 100%;
height: 100%;
object-fit: cover;
}
button {
width: 100%;
padding: 1rem;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: #fff;
border: none;
border-radius: 10px;
font-size: 1rem;
cursor: pointer;
transition: 0.3s;
font-weight: 500;
box-shadow: 0 4px 15px rgba(255, 111, 97, 0.3);
}
button:disabled {
opacity: 0.5;
cursor: not-allowed;
}
button:hover:not(:disabled) {
transform: translateY(-2px);
box-shadow: 0 6px 20px rgba(255, 111, 97, 0.4);
}
.status-message {
margin-top: 1rem;
padding: 1rem;
border-radius: 10px;
display: none;
backdrop-filter: blur(5px);
}
.success {
background: rgba(46, 204, 113, 0.2);
color: #fff;
border: 1px solid rgba(46, 204, 113, 0.3);
}
.error {
background: rgba(231, 76, 60, 0.2);
color: #fff;
border: 1px solid rgba(231, 76, 60, 0.3);
}
.countdown {
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 4rem;
color: rgba(255, 255, 255, 0.8);
z-index: 2;
display: none;
text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}
canvas {
display: none;
}
.processing {
display: none;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: rgba(0, 0, 0, 0.8);
padding: 1rem 2rem;
border-radius: 10px;
z-index: 3;
backdrop-filter: blur(5px);
border: 1px solid rgba(255, 255, 255, 0.1);
}
::placeholder {
color: rgba(255, 255, 255, 0.5);
}
/* Scroll Button */
.scroll-button {
position: fixed;
bottom: 20px;
right: 20px;
background: linear-gradient(45deg, #00d4ff, #ff6f61);
color: #fff;
border: none;
border-radius: 50%;
width: 50px;
height: 50px;
font-size: 24px;
cursor: pointer;
display: none;
justify-content: center;
align-items: center;
box-shadow: 0 4px 15px rgba(255, 111, 97, 0.3);
z-index: 1000;
}
.scroll-button:hover {
transform: translateY(-2px);
box-shadow: 0 6px 20px rgba(255, 111, 97, 0.4);
}
/* Small 3D Boxes at Top-Left and Top-Right */
.small-3d-box {
position: fixed;
width: 100px;
height: 100px;
transform-style: preserve-3d;
animation: rotate3dBox 10s infinite linear;
}
.small-3d-box .face {
position: absolute;
width: 100px;
height: 100px;
background: rgba(255, 255, 255, 0.05);
border: 1px solid rgba(255, 255, 255, 0.1);
display: flex;
justify-content: center;
align-items: center;
font-size: 14px;
color: rgba(255, 255, 255, 0.8);
}
/* Cyan and Coral Colors for 3D Box Faces */
.small-3d-box .front { transform: translateZ(50px); background: rgba(0, 212, 255, 0.1); border-color: #00d4ff; }
.small-3d-box .back { transform: rotateY(180deg) translateZ(50px); background: rgba(255, 111, 97, 0.1); border-color: #ff6f61; }
.small-3d-box .right { transform: rotateY(90deg) translateZ(50px); background: rgba(0, 212, 255, 0.1); border-color: #00d4ff; }
.small-3d-box .left { transform: rotateY(-90deg) translateZ(50px); background: rgba(255, 111, 97, 0.1); border-color: #ff6f61; }
.small-3d-box .top { transform: rotateX(90deg) translateZ(50px); background: rgba(0, 212, 255, 0.1); border-color: #00d4ff; }
.small-3d-box .bottom { transform: rotateX(-90deg) translateZ(50px); background: rgba(255, 111, 97, 0.1); border-color: #ff6f61; }
@keyframes rotate3dBox {
0% { transform: rotateX(0) rotateY(0) rotateZ(0); }
100% { transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg); }
}
.top-left-box {
top: 20px;
left: 20px;
}
.top-right-box {
top: 20px;
right: 20px;
}
</style>
</head>
<body>
<div class="particles">
<!-- Particle Animation -->
<div class="particle" style="top: 10%; left: 20%; animation-delay: 0s;"></div>
<div class="particle" style="top: 30%; left: 70%; animation-delay: 1s;"></div>
<div class="particle" style="top: 50%; left: 40%; animation-delay: 2s;"></div>
<div class="particle" style="top: 70%; left: 80%; animation-delay: 3s;"></div>
<div class="particle" style="top: 90%; left: 10%; animation-delay: 4s;"></div>
</div>
<div class="brand-background">HYPER SPECTRAL</div>
<!-- Small 3D Boxes at Top-Left and Top-Right -->
<div class="small-3d-box top-left-box">
<div class="face front"></div>
<div class="face back"></div>
<div class="face right"></div>
<div class="face left"></div>
<div class="face top"></div>
<div class="face bottom"></div>
</div>
<div class="small-3d-box top-right-box">
<div class="face front"></div>
<div class="face back"></div>
<div class="face right"></div>
<div class="face left"></div>
<div class="face top"></div>
<div class="face bottom"></div>
</div>
<div class="container">
<div class="auth-box">
<div class="logo">HYPER SPECTRAL</div>
<div class="tabs">
<div class="tab active" onclick="switchTab('login')">Login</div>
<div class="tab" onclick="switchTab('register')">Register</div>
</div>
<div id="login-form">
<input type="text" id="username" placeholder="Enter username" onchange="checkUsername()">
<div class="video-container" id="video-container">
<video id="video" autoplay playsinline></video>
<div class="countdown" id="countdown"></div>
</div>
<div class="processing" id="processing">Processing...</div>
<button onclick="startAuth()" id="auth-button">Start</button>
<div class="status-message" id="status-message"></div>
</div>
</div>
</div>
<canvas id="canvas" width="640" height="480"></canvas>
<!-- Scroll Button -->
<button class="scroll-button" onclick="scrollToBottom()">↓</button>
<script>
let currentStream = null;
let currentMode = 'login';
let captureTimeout = null;
let countdownInterval = null;
let isProcessing = false;
async function checkUsername() {
const username = document.getElementById('username').value.trim();
if (!username) return;
if (currentMode === 'register') {
try {
const response = await fetch(`/check-username/${username}`);
const data = await response.json();
if (data.exists) {
showStatus('Username already exists. Please choose another.', 'error');
document.getElementById('auth-button').disabled = true;
} else {
document.getElementById('auth-button').disabled = false;
document.getElementById('status-message').style.display = 'none';
}
} catch (error) {
console.error('Error checking username:', error);
}
}
}
function switchTab(mode) {
if (isProcessing) return;
currentMode = mode;
document.querySelectorAll('.tab').forEach(tab => {
tab.classList.remove('active');
});
document.querySelector(`.tab:${mode === 'login' ? 'first-child' : 'last-child'}`).classList.add('active');
stopCamera();
resetForm();
}
function resetForm() {
document.getElementById('username').value = '';
document.getElementById('video-container').style.display = 'none';
document.getElementById('status-message').style.display = 'none';
document.getElementById('processing').style.display = 'none';
document.getElementById('auth-button').disabled = false;
document.getElementById('auth-button').style.display = 'block';
isProcessing = false;
}
async function startAuth() {
if (isProcessing) return;
const username = document.getElementById('username').value.trim();
const authButton = document.getElementById('auth-button');
if (!username) {
showStatus('Please enter username', 'error');
return;
}
try {
authButton.disabled = true;
currentStream = await navigator.mediaDevices.getUserMedia({
video: {
width: { ideal: 640 },
height: { ideal: 480 },
facingMode: 'user'
}
});
const video = document.getElementById('video');
video.srcObject = currentStream;
document.getElementById('video-container').style.display = 'block';
authButton.style.display = 'none';
startCountdown();
} catch (error) {
showStatus('Camera access failed: ' + error.message, 'error');
authButton.disabled = false;
}
}
function startCountdown() {
let count = 3;
const countdownElement = document.getElementById('countdown');
countdownElement.style.display = 'block';
countdownElement.textContent = count;
countdownInterval = setInterval(() => {
count--;
if (count > 0) {
countdownElement.textContent = count;
} else {
clearInterval(countdownInterval);
countdownElement.style.display = 'none';
captureAndProcess();
}
}, 1000);
}
function stopCamera() {
if (currentStream) {
currentStream.getTracks().forEach(track => track.stop());
currentStream = null;
}
if (captureTimeout) {
clearTimeout(captureTimeout);
}
if (countdownInterval) {
clearInterval(countdownInterval);
}
}
function captureAndProcess() {
if (isProcessing) return;
isProcessing = true;
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const context = canvas.getContext('2d');
const processing = document.getElementById('processing');
processing.style.display = 'block';
context.drawImage(video, 0, 0, canvas.width, canvas.height);
const imageData = canvas.toDataURL('image/jpeg');
if (currentMode === 'login') {
processLogin(imageData);
} else {
processRegistration(imageData);
}
}
async function processLogin(imageData) {
const username = document.getElementById('username').value.trim();
try {
const response = await fetch('/verify', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify({ username, image: imageData })
});
const data = await response.json();
if (data.success) {
showStatus('Login successful! Redirecting...', 'success');
setTimeout(() => {
window.location.href = data.redirect || '/dashboard';
}, 1500);
} else {
showStatus(data.message || 'Login failed. Please try again.', 'error');
resetForm();
}
} catch (error) {
showStatus('Login failed: ' + error.message, 'error');
resetForm();
} finally {
stopCamera();
isProcessing = false;
}
}
async function processRegistration(imageData) {
const username = document.getElementById('username').value.trim();
try {
const response = await fetch('/register', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify({ username, image: imageData })
});
const data = await response.json();
if (data.success) {
showStatus('Registration successful! Switching to login...', 'success');
setTimeout(() => {
switchTab('login');
document.getElementById('username').value = username;
}, 1500);
} else {
showStatus(data.message || 'Registration failed. Please try again.', 'error');
resetForm();
}
} catch (error) {
showStatus('Registration failed: ' + error.message, 'error');
resetForm();
} finally {
stopCamera();
isProcessing = false;
}
}
function showStatus(message, type) {
const statusElement = document.getElementById('status-message');
statusElement.textContent = message;
statusElement.className = 'status-message ' + type;
statusElement.style.display = 'block';
}
window.addEventListener('beforeunload', () => {
stopCamera();
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="TirumalaManav">
<meta name="timestamp" content="2025-01-23 13:31:46">
<title>Hyperspectral Image Classification</title>
<!-- CSS Libraries -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<!-- JavaScript Libraries -->
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<style>
:root {
--primary-color: #2a2a72;
--secondary-color: #00d4ff;
--success-color: #ff6f61;
--error-color: #ef4444;
--background-color: #f8f9fa;
--card-bg: rgba(255, 255, 255, 0.9);
--text-primary: #2a2a72;
--text-secondary: #636e72;
--border-color: rgba(42, 42, 114, 0.1);
}
* {
margin: 0;
padding: 0;
box-sizing: border-box;
font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
}
body {
background: var(--background-color);
color: var(--text-primary);
line-height: 1.6;
overflow-x: hidden;
transition: background 0.5s, color 0.5s;
}
body.dark-mode {
background: #1a1a2e;
color: #ffffff;
}
/* Custom Scrollbar */
::-webkit-scrollbar {
width: 10px;
}
::-webkit-scrollbar-track {
background: var(--background-color);
}
::-webkit-scrollbar-thumb {
background: var(--secondary-color);
border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
background: var(--success-color);
}
body.dark-mode ::-webkit-scrollbar-track {
background: #1a1a2e;
}
body.dark-mode ::-webkit-scrollbar-thumb {
background: var(--secondary-color);
}
body.dark-mode ::-webkit-scrollbar-thumb:hover {
background: var(--success-color);
}
/* Hero Section */
.hero-section {
background: linear-gradient(45deg, var(--secondary-color), var(--success-color));
color: white;
padding: 150px 0 200px;
position: relative;
overflow: hidden;
perspective: 1000px;
}
.hero-content {
max-width: 800px;
margin: 0 auto;
text-align: center;
position: relative;
z-index: 2;
}
.hero-content h1 {
font-size: 4rem;
margin-bottom: 20px;
font-weight: 700;
background: linear-gradient(45deg, #ffffff, #f8f9fa);
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
animation: floatText 4s infinite ease-in-out;
}
@keyframes floatText {
0%, 100% { transform: translateY(0) rotateX(0); }
50% { transform: translateY(-10px) rotateX(10deg); }
}
.hero-content p {
font-size: 1.2rem;
color: rgba(255, 255, 255, 0.9);
max-width: 600px;
margin: 0 auto;
}
/* Dark Mode Toggle */
.dark-mode-toggle {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
background: rgba(255, 255, 255, 0.9);
border-radius: 50%;
width: 40px;
height: 40px;
display: flex;
align-items: center;
justify-content: center;
cursor: pointer;
box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
transition: background 0.3s;
}
.dark-mode-toggle:hover {
background: rgba(255, 255, 255, 1);
}
.dark-mode-toggle i {
color: var(--primary-color);
font-size: 1.2rem;
}
body.dark-mode .dark-mode-toggle {
background: rgba(42, 42, 114, 0.9);
}
body.dark-mode .dark-mode-toggle i {
color: #ffffff;
}
/* Container and Grid */
.container {
max-width: 1400px;
margin: -100px auto 0;
padding: 0 20px;
position: relative;
z-index: 2;
}
.grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
gap: 2rem;
margin-top: 2rem;
}
/* Cards */
.card {
background: var(--card-bg);
border-radius: 20px;
padding: 1.5rem;
box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
backdrop-filter: blur(10px);
border: 2px solid transparent;
transition: transform 0.5s ease, box-shadow 0.5s ease;
}
.card:hover {
transform: rotateY(10deg) rotateX(10deg) translateY(-10px);
box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
}
.card-header {
display: flex;
align-items: center;
margin-bottom: 1.5rem;
padding-bottom: 1rem;
border-bottom: 1px solid var(--border-color);
}
.card-header i {
font-size: 1.5rem;
margin-right: 0.75rem;
color: var(--secondary-color);
}
.card-header h2 {
font-size: 1.25rem;
color: var(--text-primary);
}
/* Form Elements */
.form-group {
margin-bottom: 1.5rem;
}
.form-group label {
display: block;
margin-bottom: 0.5rem;
color: var(--text-primary);
font-weight: 500;
}
.select-wrapper {
position: relative;
margin-bottom: 1rem;
}
.select-wrapper::after {
content: '\f107';
font-family: 'Font Awesome 5 Free';
font-weight: 900;
position: absolute;
right: 1rem;
top: 50%;
transform: translateY(-50%);
pointer-events: none;
}
select {
width: 100%;
padding: 0.75rem 1rem;
border: 1px solid var(--border-color);
border-radius: 0.5rem;
background: var(--card-bg);
color: var(--text-primary);
font-size: 1rem;
appearance: none;
cursor: pointer;
}
select:focus {
outline: 2px solid var(--secondary-color);
outline-offset: 2px;
}
.file-upload {
border: 2px dashed var(--border-color);
border-radius: 0.5rem;
padding: 2rem;
text-align: center;
cursor: pointer;
transition: all 0.3s ease;
}
.file-upload:hover {
border-color: var(--secondary-color);
background-color: var(--background-color);
}
.file-upload i {
font-size: 2rem;
color: var(--secondary-color);
margin-bottom: 1rem;
}
.file-upload p {
color: var(--text-secondary);
margin: 0.5rem 0;
}
.validation-message {
margin-top: 1rem;
padding: 1rem;
border-radius: 0.5rem;
font-size: 0.9rem;
}
.validation-message.success {
background-color: #dcfce7;
color: #166534;
border: 1px solid var(--success-color);
}
.validation-message.error {
background-color: #fee2e2;
color: #991b1b;
border: 1px solid var(--error-color);
}
.parameter-slider {
width: 100%;
margin: 1rem 0;
}
.slider-container {
display: flex;
align-items: center;
gap: 1rem;
}
.slider-value {
min-width: 60px;
padding: 0.25rem 0.5rem;
background: var(--background-color);
border-radius: 0.25rem;
text-align: center;
}
input[type="range"] {
width: 100%;
height: 6px;
background: var(--border-color);
border-radius: 3px;
outline: none;
}
input[type="range"]::-webkit-slider-thumb {
-webkit-appearance: none;
width: 18px;
height: 18px;
background: var(--secondary-color);
border-radius: 50%;
cursor: pointer;
transition: all 0.3s ease;
}
input[type="range"]::-webkit-slider-thumb:hover {
transform: scale(1.1);
}
.switch-container {
display: flex;
align-items: center;
justify-content: space-between;
margin: 1rem 0;
}
.switch {
position: relative;
display: inline-block;
width: 50px;
height: 24px;
}
.switch input {
opacity: 0;
width: 0;
height: 0;
}
.slider {
position: absolute;
cursor: pointer;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: var(--border-color);
transition: .4s;
border-radius: 24px;
}
.slider:before {
position: absolute;
content: "";
height: 20px;
width: 20px;
left: 2px;
bottom: 2px;
background-color: white;
transition: .4s;
border-radius: 50%;
}
input:checked + .slider {
background-color: var(--success-color);
}
input:checked + .slider:before {
transform: translateX(26px);
}
.btn {
display: inline-flex;
align-items: center;
justify-content: center;
padding: 0.75rem 1.5rem;
border-radius: 0.5rem;
font-weight: 500;
cursor: pointer;
transition: all 0.3s ease;
border: none;
gap: 0.5rem;
width: 100%;
}
.btn-primary {
background: linear-gradient(45deg, var(--secondary-color), var(--success-color));
color: white;
}
.btn-primary:hover {
transform: translateY(-2px);
}
.btn:disabled {
opacity: 0.7;
cursor: not-allowed;
}
.training-progress {
display: none;
margin-top: 1rem;
}
.training-progress.active {
display: block;
}
.progress-bar-container {
width: 100%;
height: 8px;
background-color: var(--border-color);
border-radius: 4px;
overflow: hidden;
margin: 10px 0;
}
.progress-bar-fill {
height: 100%;
width: 0%;
background-color: var(--secondary-color);
transition: width 0.3s ease;
}
.toast {
position: fixed;
right: 20px;
top: 20px;
z-index: 1000;
border-radius: 8px;
padding: 16px;
color: white;
animation: slideIn 0.3s ease-in-out;
}
@keyframes slideIn {
from {
transform: translateX(100%);
opacity: 0;
}
to {
transform: translateX(0);
opacity: 1;
}
}
@media (max-width: 768px) {
.container {
padding: 1rem;
}
.grid {
grid-template-columns: 1fr;
}
.card {
padding: 1rem;
}
}
/* Loading Animation */
.loading-screen {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background: linear-gradient(45deg, var(--secondary-color), var(--success-color));
display: flex;
align-items: center;
justify-content: center;
z-index: 1000;
transition: opacity 1s;
}
.loading-screen.hide {
opacity: 0;
pointer-events: none;
}
.loading-screen h1 {
font-size: 3rem;
color: white;
animation: pulse 1.5s infinite;
}
@keyframes pulse {
0%, 100% { transform: scale(1); }
50% { transform: scale(1.1); }
}
</style>
</head>
<body>
<!-- Loading Screen -->
<div class="loading-screen">
<h1>Loading...</h1>
</div>
<!-- Dark Mode Toggle -->
<div class="dark-mode-toggle" onclick="toggleDarkMode()">
<i class="fas fa-moon"></i>
</div>
<!-- Hero Section -->
<div class="hero-section">
<div class="hero-content">
<h1>Hyperspectral Image Classification</h1>
<p>Advanced Deep Learning Models for Hyperspectral Data Analysis</p>
</div>
</div>
<!-- Main Content -->
<div class="container">
<div class="grid">
<!-- Dataset Selection Card -->
<div class="card">
<div class="card-header">
<i class="fas fa-database"></i>
<h2>Dataset Selection</h2>
</div>
<div class="form-group">
<div class="file-upload" id="file-upload">
<i class="fas fa-folder-open"></i>
<p>Select Dataset Folder</p>
<p>(Must contain dataset.mat and dataset_gt.mat files)</p>
<input type="file" id="folder-input" webkitdirectory directory multiple style="display: none">
<div id="selected-files" class="validation-message"></div>
</div>
</div>
</div>
<!-- Model Configuration Card -->
<div class="card">
<div class="card-header">
<i class="fas fa-cogs"></i>
<h2>Model Configuration</h2>
</div>
<div class="form-group">
<label>Select Model</label>
<div class="select-wrapper">
<select id="model-select" disabled>
<option value="">Choose a model</option>
<option value="cnn">Convolutional Neural Network (CNN)</option>
<option value="autoencoder">Autoencoder (AE)</option>
</select>
</div>
</div>
<div class="form-group">
<h3>Hyperparameters</h3>
<div class="parameter-slider">
<label>Patch Size</label>
<div class="slider-container">
<input type="range" id="patch-size" min="1" max="9" step="2" value="7">
<span class="slider-value" id="patch-size-value">7</span>
</div>
</div>
<div class="parameter-slider">
<label>Learning Rate</label>
<div class="slider-container">
<input type="range" id="learning-rate" min="1" max="100" value="100">
<span class="slider-value" id="learning-rate-value">0.01</span>
</div>
</div>
<div class="parameter-slider">
<label>Batch Size</label>
<div class="slider-container">
<input type="range" id="batch-size" min="2" max="256" step="16" value="4">
<span class="slider-value" id="batch-size-value">4</span>
</div>
</div>
<div class="parameter-slider">
<label>Epochs</label>
<div class="slider-container">
<input type="range" id="epochs" min="10" max="200" step="10" value="10">
<span class="slider-value" id="epochs-value">10</span>
</div>
</div>
<div class="switch-container">
<label>Flip Augmentation</label>
<label class="switch">
<input type="checkbox" id="flip-aug">
<span class="slider"></span>
</label>
</div>
<div class="switch-container">
<label>Radiation Augmentation</label>
<label class="switch">
<input type="checkbox" id="radiation-aug">
<span class="slider"></span>
</label>
</div>
<div class="switch-container">
<label>Mixture Augmentation</label>
<label class="switch">
<input type="checkbox" id="mixture-aug">
<span class="slider"></span>
</label>
</div>
</div>
<button id="start-training" class="btn btn-primary" disabled>
<i class="fas fa-play"></i>
Start Training
</button>
</div>
</div>
</div>
<script>
// API Configuration
const API_URL = 'http://localhost:5000/api';
// Toast notification function
function showToast(message, isSuccess = true) {
Toastify({
text: message,
duration: 3000,
gravity: "top",
position: "right",
backgroundColor: isSuccess ? "#10b981" : "#ef4444",
className: isSuccess ? "toast success" : "toast error",
}).showToast();
}
// Global state
let currentDataset = null;
let currentModel = null;
let isTraining = false;
// UI Elements
const folderInput = document.getElementById('folder-input');
const fileUpload = document.getElementById('file-upload');
const selectedFiles = document.getElementById('selected-files');
const modelSelect = document.getElementById('model-select');
const startTrainingBtn = document.getElementById('start-training');
// API Functions with improved error handling
async function validateDatasetAPI(datasetPath) {
try {
const response = await fetch(`${API_URL}/validate-dataset`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ datasetPath })
});
if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
const data = await response.json();
console.log('Dataset validation response:', data);
return data;
} catch (error) {
console.error('Dataset validation error:', error);
return { success: false, message: `Dataset validation failed: ${error.message}` };
}
}
async function validateModelAPI(modelType) {
try {
const response = await fetch(`${API_URL}/validate-model`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ modelType })
});
if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
const data = await response.json();
console.log('Model validation response:', data);
return data;
} catch (error) {
console.error('Model validation error:', error);
return { success: false, message: `Model validation failed: ${error.message}` };
}
}
async function startTrainingAPI(config) {
try {
console.log('Training config:', config);
const response = await fetch(`${API_URL}/train`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify(config)
});
if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
const data = await response.json();
console.log('Training response:', data);
return data;
} catch (error) {
console.error('Training error:', error);
return { success: false, message: `Training failed: ${error.message}` };
}
}
function resetTrainingUI() {
startTrainingBtn.disabled = false;
startTrainingBtn.innerHTML = '<i class="fas fa-play"></i> Start Training';
isTraining = false;
}
// Event Listeners
fileUpload.addEventListener('click', () => folderInput.click());
folderInput.addEventListener('change', async (e) => {
const files = Array.from(e.target.files);
if (files.length === 0) return;
// Filter .mat files
const matFiles = files.filter(file => file.name.toLowerCase().endsWith('.mat'));
const folderPath = files[0].webkitRelativePath.split('/')[0];
// Reset UI state
modelSelect.disabled = true;
startTrainingBtn.disabled = true;
currentDataset = null;
if (matFiles.length >= 2) {
const validation = await validateDatasetAPI(folderPath);
if (validation.success) {
currentDataset = folderPath;
selectedFiles.innerHTML = `
<div class="validation-message success">
<i class="fas fa-check-circle"></i> Dataset validated successfully
<br>
<strong>Files found:</strong> ${matFiles.length} .mat files
</div>
`;
showToast("Dataset validated successfully");
modelSelect.disabled = false;
} else {
selectedFiles.innerHTML = `
<div class="validation-message error">
<i class="fas fa-exclamation-circle"></i> ${validation.message}
</div>
`;
showToast(validation.message, false);
}
} else {
selectedFiles.innerHTML = `
<div class="validation-message error">
<i class="fas fa-exclamation-circle"></i> Please select a folder with at least 2 .mat files
</div>
`;
showToast("Invalid dataset folder", false);
}
});
modelSelect.addEventListener('change', async (e) => {
const modelType = e.target.value;
if (!modelType) return;
console.log('Selected model:', modelType);
startTrainingBtn.disabled = true;
currentModel = null;
const validation = await validateModelAPI(modelType);
if (validation.success) {
currentModel = modelType;
showToast(`${modelType.toUpperCase()} model validated successfully`);
startTrainingBtn.disabled = false;
} else {
showToast(validation.message, false);
}
});
startTrainingBtn.addEventListener('click', async () => {
if (!currentDataset || !currentModel || isTraining) return;
const config = {
datasetPath: currentDataset,
modelType: currentModel,
hyperparameters: {
patchSize: parseInt(document.getElementById('patch-size').value),
learningRate: parseFloat(document.getElementById('learning-rate-value').textContent),
batchSize: parseInt(document.getElementById('batch-size').value),
epochs: parseInt(document.getElementById('epochs').value)
},
augmentation: {
flip: document.getElementById('flip-aug').checked,
radiation: document.getElementById('radiation-aug').checked,
mixture: document.getElementById('mixture-aug').checked
}
};
try {
isTraining = true;
startTrainingBtn.disabled = true;
startTrainingBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Training...';
const response = await startTrainingAPI(config);
if (response.success) {
showToast("Training completed successfully");
// Check if the response contains a redirect URL
if (response.redirect_url) {
// Redirect to the prediction page
window.location.href = response.redirect_url;
}
} else {
showToast(response.message, false);
}
} catch (error) {
showToast("Error during training: " + error.message, false);
} finally {
resetTrainingUI();
}
});
// Hyperparameter slider updates
document.getElementById('patch-size').addEventListener('input', (e) => {
document.getElementById('patch-size-value').textContent = e.target.value;
});
document.getElementById('learning-rate').addEventListener('input', (e) => {
const value = (parseInt(e.target.value) / 10000).toFixed(4);
document.getElementById('learning-rate-value').textContent = value;
});
document.getElementById('batch-size').addEventListener('input', (e) => {
document.getElementById('batch-size-value').textContent = e.target.value;
});
document.getElementById('epochs').addEventListener('input', (e) => {
document.getElementById('epochs-value').textContent = e.target.value;
});
// Initialize UI
document.addEventListener('DOMContentLoaded', () => {
modelSelect.disabled = true;
startTrainingBtn.disabled = true;
// Hide loading screen after 2 seconds (fallback in case assets fail to load)
setTimeout(() => {
const loadingScreen = document.querySelector('.loading-screen');
loadingScreen.classList.add('hide');
}, 2000);
console.log('Application initialized:', {
time: "2025-01-23 13:27:01",
user: "TirumalaManav"
});
});
</script>
</body>
</html>